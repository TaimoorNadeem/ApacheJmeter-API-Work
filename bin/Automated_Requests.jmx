<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="HAUD API v2 - Devs@Haud" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="START_TIME" elementType="Argument">
            <stringProp name="Argument.name">START_TIME</stringProp>
            <stringProp name="Argument.value">${__time(HHmmssSSS)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="START_DATE" elementType="Argument">
            <stringProp name="Argument.name">START_DATE</stringProp>
            <stringProp name="Argument.value">${__time(yyyyMMdd)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RANDOM_CHAR_SET" elementType="Argument">
            <stringProp name="Argument.name">RANDOM_CHAR_SET</stringProp>
            <stringProp name="Argument.value">${__RandomString(4,abcdefghijklmnopqrstuvwxyz)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AUTH_TIME" elementType="Argument">
            <stringProp name="Argument.name">AUTH_TIME</stringProp>
            <stringProp name="Argument.value">${__time(/1000,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NOW_YEAR" elementType="Argument">
            <stringProp name="Argument.name">NOW_YEAR</stringProp>
            <stringProp name="Argument.value">${__time(YYYY,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NOW_MONTH" elementType="Argument">
            <stringProp name="Argument.name">NOW_MONTH</stringProp>
            <stringProp name="Argument.value">${__time(L,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NOW_DAY" elementType="Argument">
            <stringProp name="Argument.name">NOW_DAY</stringProp>
            <stringProp name="Argument.value">${__time(dd,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="REPORT_FILE_POSTFIX" elementType="Argument">
            <stringProp name="Argument.name">REPORT_FILE_POSTFIX</stringProp>
            <stringProp name="Argument.value">${__time(yyyyMMddHHmm,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SALT" elementType="Argument">
            <stringProp name="Argument.name">SALT</stringProp>
            <stringProp name="Argument.value">${START_DATE}${START_TIME}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_API_HOST" elementType="Argument">
            <stringProp name="Argument.name">SERVER_API_HOST</stringProp>
            <stringProp name="Argument.value">192.168.14.159</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_API_PORT" elementType="Argument">
            <stringProp name="Argument.name">SERVER_API_PORT</stringProp>
            <stringProp name="Argument.value">7020</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_API_PROTO" elementType="Argument">
            <stringProp name="Argument.name">SERVER_API_PROTO</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_NAME" elementType="Argument">
            <stringProp name="Argument.name">USER_NAME</stringProp>
            <stringProp name="Argument.value">joe.borg</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_PASS" elementType="Argument">
            <stringProp name="Argument.name">USER_PASS</stringProp>
            <stringProp name="Argument.value">Haudsysops123!</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_API" elementType="Argument">
            <stringProp name="Argument.name">USER_API</stringProp>
            <stringProp name="Argument.value">api</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AUTH_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">AUTH_TOKEN</stringProp>
            <stringProp name="Argument.value">NONE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SHARED_KEY" elementType="Argument">
            <stringProp name="Argument.name">SHARED_KEY</stringProp>
            <stringProp name="Argument.value">NONE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_LDAP_HOST" elementType="Argument">
            <stringProp name="Argument.name">SERVER_LDAP_HOST</stringProp>
            <stringProp name="Argument.value">191.255.15.251</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_LDAP_PORT" elementType="Argument">
            <stringProp name="Argument.name">SERVER_LDAP_PORT</stringProp>
            <stringProp name="Argument.value">3268</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_DATABASE_HOST" elementType="Argument">
            <stringProp name="Argument.name">SERVER_DATABASE_HOST</stringProp>
            <stringProp name="Argument.value">192.168.14.156</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_DATABASE_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">SERVER_DATABASE_USERNAME</stringProp>
            <stringProp name="Argument.value">cpiccinino</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_DATABASE_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">SERVER_DATABASE_PASSWORD</stringProp>
            <stringProp name="Argument.value">k7sF7DPpUO</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_API_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">USER_API_TOKEN</stringProp>
            <stringProp name="Argument.value">NONE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CDR_ID_MAX" elementType="Argument">
            <stringProp name="Argument.name">CDR_ID_MAX</stringProp>
            <stringProp name="Argument.value">NONE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_IP" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_IP</stringProp>
            <stringProp name="Argument.value">90.11.0.7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="network" elementType="Argument">
            <stringProp name="Argument.name">network</stringProp>
            <stringProp name="Argument.value">90.11.0.7/16</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">qatest.admin@internal.haud</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="limit" elementType="Argument">
            <stringProp name="Argument.name">limit</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SALT" elementType="Argument">
            <stringProp name="Argument.name">SALT</stringProp>
            <stringProp name="Argument.value">${START_DATE}${START_TIME}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_API_HOST" elementType="Argument">
            <stringProp name="Argument.name">SERVER_API_HOST</stringProp>
            <stringProp name="Argument.value">192.168.14.159</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_API_PORT" elementType="Argument">
            <stringProp name="Argument.name">SERVER_API_PORT</stringProp>
            <stringProp name="Argument.value">7020</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_API_PROTO" elementType="Argument">
            <stringProp name="Argument.name">SERVER_API_PROTO</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_NAME" elementType="Argument">
            <stringProp name="Argument.name">USER_NAME</stringProp>
            <stringProp name="Argument.value">joe.borg</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_PASS" elementType="Argument">
            <stringProp name="Argument.name">USER_PASS</stringProp>
            <stringProp name="Argument.value">Haudsysops123!</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_API" elementType="Argument">
            <stringProp name="Argument.name">USER_API</stringProp>
            <stringProp name="Argument.value">api</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AUTH_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">AUTH_TOKEN</stringProp>
            <stringProp name="Argument.value">NONE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SHARED_KEY" elementType="Argument">
            <stringProp name="Argument.name">SHARED_KEY</stringProp>
            <stringProp name="Argument.value">NONE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_LDAP_HOST" elementType="Argument">
            <stringProp name="Argument.name">SERVER_LDAP_HOST</stringProp>
            <stringProp name="Argument.value">191.255.15.251</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_LDAP_PORT" elementType="Argument">
            <stringProp name="Argument.name">SERVER_LDAP_PORT</stringProp>
            <stringProp name="Argument.value">3268</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_DATABASE_HOST" elementType="Argument">
            <stringProp name="Argument.name">SERVER_DATABASE_HOST</stringProp>
            <stringProp name="Argument.value">192.168.14.156</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_DATABASE_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">SERVER_DATABASE_USERNAME</stringProp>
            <stringProp name="Argument.value">cpiccinino</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_DATABASE_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">SERVER_DATABASE_PASSWORD</stringProp>
            <stringProp name="Argument.value">k7sF7DPpUO</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_API_TOKEN" elementType="Argument">
            <stringProp name="Argument.name">USER_API_TOKEN</stringProp>
            <stringProp name="Argument.value">NONE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CDR_ID_MAX" elementType="Argument">
            <stringProp name="Argument.name">CDR_ID_MAX</stringProp>
            <stringProp name="Argument.value">NONE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_IP" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_IP</stringProp>
            <stringProp name="Argument.value">90.11.0.7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="network" elementType="Argument">
            <stringProp name="Argument.name">network</stringProp>
            <stringProp name="Argument.value">90.11.0.7/16</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">qatest.admin@internal.haud</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="limit" elementType="Argument">
            <stringProp name="Argument.name">limit</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">true</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${SERVER_API_HOST}</stringProp>
        <stringProp name="HTTPSampler.port">${SERVER_API_PORT}</stringProp>
        <stringProp name="HTTPSampler.protocol">${SERVER_API_PROTO}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <stringProp name="dataSource">db60</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">TRANSACTION_SERIALIZABLE</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="dbUrl">jdbc:mysql://${SERVER_DATABASE_HOST}:3306/haud3</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">cpiccinino</stringProp>
        <stringProp name="password">k7sF7DPpUO</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HAUD API v2 | Automation Tests" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="AUTH_SYSTEM" elementType="Argument">
              <stringProp name="Argument.name">AUTH_SYSTEM</stringProp>
              <stringProp name="Argument.value">ims</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AUTH_USER_NAME" elementType="Argument">
              <stringProp name="Argument.name">AUTH_USER_NAME</stringProp>
              <stringProp name="Argument.value">qatest.admin@internal.haud</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.Database Tests" enabled="true">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Create User" enabled="true">
            <stringProp name="dataSource">db60</stringProp>
            <stringProp name="queryType">AutoCommit(true)</stringProp>
            <stringProp name="query">CREATE USER &apos;${SERVER_DATABASE_USERNAME}&apos;@&apos;${CLIENT_IP}&apos; IDENTIFIED BY &apos;${SERVER_DATABASE_PASSWORD}&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">CREATE_USER</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout">10</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Grant Privillages to User" enabled="true">
            <stringProp name="dataSource">db60</stringProp>
            <stringProp name="queryType">AutoCommit(true)</stringProp>
            <stringProp name="query">GRANT ALL PRIVILEGES ON haud3.* TO &apos;${SERVER_DATABASE_USERNAME}&apos;@&apos;${CLIENT_IP}&apos;;
FLUSH PRIVILEGES;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">USER_PRIVILEGES</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout">10</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Grant Privillages to api" enabled="true">
            <stringProp name="dataSource">db60</stringProp>
            <stringProp name="queryType">AutoCommit(true)</stringProp>
            <stringProp name="query">GRANT ALL PRIVILEGES ON haud3.* TO &apos;${USER_API}&apos;@&apos;${SERVER_API_HOST}&apos; WITH GRANT OPTION;
FLUSH PRIVILEGES;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">API_PRIVILEGES</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout">10</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Set Authentication Limit" enabled="true">
            <stringProp name="dataSource">db60</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">INSERT INTO `haud3`.`iplimits` (network, username, `limit`)
SELECT * FROM (SELECT &apos;${network}&apos;, &apos;${username}&apos;, &apos;${limit}&apos;) AS tmp
WHERE NOT EXISTS (
SELECT network,username FROM `haud3`.`iplimits` WHERE network = &apos;${network}&apos; and username = &apos;${username}&apos;
) LIMIT 1;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">IF_RECORD_NOT_FOUND</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout">10</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Token_Key" enabled="true">
            <stringProp name="dataSource">db60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT `token` FROM `haud3`.`api_tokens` WHERE `id`=200;</stringProp>
            <stringProp name="queryArguments">Running</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">AUTH_TOKEN</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Shared_Key" enabled="true">
            <stringProp name="dataSource">db60</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT `shared_key` FROM `haud3`.`api_systems` WHERE `sys_name`=&apos;${AUTH_SYSTEM}&apos;;</stringProp>
            <stringProp name="queryArguments">Running</stringProp>
            <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
            <stringProp name="variableNames">SHARED_KEY</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout">10</stringProp>
            <stringProp name="resultSetMaxRows">1</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC Shared Key Processor" enabled="true">
              <stringProp name="dataSource">db60</stringProp>
              <stringProp name="query">SELECT `shared_key` FROM `haud3`.`api_systems` WHERE `sys_name`=&apos;${AUTH_SYSTEM}&apos;;</stringProp>
              <stringProp name="queryArguments">Running</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
              <stringProp name="queryTimeout">10</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows">1</stringProp>
              <stringProp name="resultVariable">IMS_SHARED_KEY</stringProp>
              <stringProp name="variableNames">shared_key</stringProp>
            </JDBCPostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.LDAP Extended Request Tests" enabled="true">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <LDAPExtSampler guiclass="LdapExtTestSamplerGui" testclass="LDAPExtSampler" testname="LDAP Extended Request" enabled="true">
            <stringProp name="servername">${SERVER_LDAP_HOST}</stringProp>
            <stringProp name="port">${SERVER_LDAP_PORT}</stringProp>
            <stringProp name="rootdn">DC=matfar,DC=haud</stringProp>
            <stringProp name="scope">2</stringProp>
            <stringProp name="countlimit"></stringProp>
            <stringProp name="timelimit"></stringProp>
            <stringProp name="attributes"></stringProp>
            <stringProp name="return_object">false</stringProp>
            <stringProp name="deref_aliases">false</stringProp>
            <stringProp name="connection_timeout"></stringProp>
            <stringProp name="parseflag">false</stringProp>
            <stringProp name="secure">false</stringProp>
            <stringProp name="trustall">false</stringProp>
            <stringProp name="user_dn">CN=joe.borg,CN=Users,DC=matfar,DC=haud</stringProp>
            <stringProp name="user_pw">Haudsysops123!</stringProp>
            <stringProp name="comparedn"></stringProp>
            <stringProp name="comparefilt"></stringProp>
            <stringProp name="modddn"></stringProp>
            <stringProp name="newdn"></stringProp>
            <stringProp name="test">bind</stringProp>
          </LDAPExtSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1427748071">&lt;ldapanswer&gt;&lt;operation&gt;&lt;opertype&gt;bind&lt;/opertype&gt;
&lt;baseobj&gt;DC=matfar,DC=haud&lt;/baseobj&gt;
&lt;binddn&gt;CN=joe.borg,CN=Users,DC=matfar,DC=haud&lt;/binddn&gt;
&lt;connectionTO/&gt;
&lt;/operation&gt;
&lt;responsecode&gt;0&lt;/responsecode&gt;
&lt;responsemessage&gt;Success&lt;/responsemessage&gt;
&lt;/ldapanswer&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPath2Assertion guiclass="XPath2AssertionGui" testclass="XPath2Assertion" testname="XPath2 Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath"></stringProp>
              <stringProp name="XPath.namespaces">/ldapanswer/responsemessage=&apos;Success&apos;</stringProp>
            </XPath2Assertion>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="3.Authorization Tests" enabled="true">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Auth Token" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;system&quot;: &quot;${AUTH_SYSTEM}&quot;,&#xd;
	&quot;user&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;time&quot;: ${AUTH_TIME},&#xd;
	&quot;hash&quot;: &quot;${API_01_AUTH_HASH}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/auth</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate hash" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def authSystem = vars.get(&quot;AUTH_SYSTEM&quot;);
def authUserName = vars.get(&quot;AUTH_USER_NAME&quot;);
def authTime = vars.get(&quot;AUTH_TIME&quot;);
def authImsSharedKey = vars.get(&quot;shared_key_1&quot;);
def authHashString = authSystem +&quot;::&quot;+ authUserName +&quot;::&quot;+ authTime +&quot;::&quot;+ authImsSharedKey;
log.info(&quot;authHashString: &quot; + authHashString);
def authHash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(authHashString);
vars.put(&quot;API_01_AUTH_HASH_STRING&quot;, authHashString);
vars.put(&quot;API_01_TIME&quot;, authTime);
vars.put(&quot;API_01_AUTH_HASH&quot;, authHash);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert header no Content-Type JSON" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1510192575">Content-Type: application/json;charset=UTF-8</stringProp>
                <stringProp name="2066544187">Content-Type: application/json</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">52</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Token" enabled="true">
              <stringProp name="JMES_PATH">token</stringProp>
              <stringProp name="EXPECTED_VALUE">^(\d+)$</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Key" enabled="true">
              <stringProp name="JMES_PATH">key</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Expire" enabled="true">
              <stringProp name="JMES_PATH">expire</stringProp>
              <stringProp name="EXPECTED_VALUE">^(\d+)$</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert IP" enabled="true">
              <stringProp name="JMES_PATH">ip</stringProp>
              <stringProp name="EXPECTED_VALUE">${CLIENT_IP}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathExtractor guiclass="JMESPathExtractorGui" testclass="JMESPathExtractor" testname="Extract Token" enabled="true">
              <stringProp name="JMESExtractor.referenceName">AUTH_ID</stringProp>
              <stringProp name="JMESExtractor.jmesPathExpr">token</stringProp>
              <stringProp name="JMESExtractor.matchNumber">1</stringProp>
              <stringProp name="JMESExtractor.defaultValue">NONE</stringProp>
            </JMESPathExtractor>
            <hashTree/>
            <JMESPathExtractor guiclass="JMESPathExtractorGui" testclass="JMESPathExtractor" testname="Extract Key" enabled="true">
              <stringProp name="JMESExtractor.referenceName">AUTH_KEY</stringProp>
              <stringProp name="JMESExtractor.jmesPathExpr">key</stringProp>
              <stringProp name="JMESExtractor.matchNumber">1</stringProp>
              <stringProp name="JMESExtractor.defaultValue">NONE</stringProp>
            </JMESPathExtractor>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="4.Bodyguard Tests" enabled="false">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert header no Content-Type JSON" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1510192575">Content-Type: application/json;charset=UTF-8</stringProp>
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">52</intProp>
          </ResponseAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
            <stringProp name="DurationAssertion.duration">6000</stringProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </DurationAssertion>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.1 Bodyguard | Get Client" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_01_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_01_AUTH_HASH}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/get/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/get/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_01_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_01_TIME&quot;, requestTime);
vars.put(&quot;API_01_AUTH_HASH&quot;, hashCropped);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Data" enabled="true">
              <stringProp name="JMES_PATH">data</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">true</boolProp>
              <boolProp name="INVERT">true</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.2 Bodyguard | Get Client count" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_02_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_02_AUTH_HASH}&quot;,&#xd;
	&quot;count_only&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/get/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/get/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_02_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_02_TIME&quot;, requestTime);
vars.put(&quot;API_02_AUTH_HASH&quot;, hashCropped);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert count" enabled="true">
              <stringProp name="JMES_PATH">count</stringProp>
              <stringProp name="EXPECTED_VALUE">^(\d)+$</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.3 Bodyguard | Add Client" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_03_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_03_AUTH_HASH}&quot;,&#xd;
	&quot;imsi&quot;: ${API_03_IMSI},&#xd;
	&quot;msisdn&quot;: ${API_03_MSISDN}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/add/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/add/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_03_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_03_TIME&quot;, requestTime);
vars.put(&quot;API_03_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate IMSI MSISDN" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_03_IMSI&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_03_MSISDN&quot;, Math.floor(Math.random()*1000000000000000));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">Client Added successfully</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert client_id" enabled="true">
              <stringProp name="JMES_PATH">client_id</stringProp>
              <stringProp name="EXPECTED_VALUE">^(\d+)$</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathExtractor guiclass="JMESPathExtractorGui" testclass="JMESPathExtractor" testname="Extract client_id" enabled="true">
              <stringProp name="JMESExtractor.referenceName">API_03_CLIENT_ID</stringProp>
              <stringProp name="JMESExtractor.jmesPathExpr">client_id</stringProp>
              <stringProp name="JMESExtractor.matchNumber">1</stringProp>
              <stringProp name="JMESExtractor.defaultValue">NONE</stringProp>
            </JMESPathExtractor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.4 Bodyguard | Edit Client ${API_03_CLIENT_ID}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_04_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_04_AUTH_HASH}&quot;,&#xd;
	&quot;client_id&quot;: ${API_03_CLIENT_ID},&#xd;
	&quot;imsi&quot;: ${API_04_IMSI},&#xd;
	&quot;msisdn&quot;: ${API_04_MSISDN}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/replace/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/replace/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_04_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_04_TIME&quot;, requestTime);
vars.put(&quot;API_04_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate IMSI MSISDN" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_04_IMSI&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_04_MSISDN&quot;, Math.floor(Math.random()*1000000000000000));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">Client updated successfully</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert client_id" enabled="true">
              <stringProp name="JMES_PATH">client_id</stringProp>
              <stringProp name="EXPECTED_VALUE">${API_03_CLIENT_ID}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.5 Bodyguard | Optional Parameters (Count = 1)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_05_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_05_AUTH_HASH}&quot;,&#xd;
	&quot;client_id&quot;: ${API_03_CLIENT_ID},&#xd;
	&quot;imsi&quot;: &quot;${API_04_IMSI}&quot;,&#xd;
	&quot;msisdn&quot;: &quot;${API_04_MSISDN}&quot;,&#xd;
	&quot;created_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;last_changed_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;orderby&quot; : &quot;last_changed_by&quot;,&#xd;
	&quot;count_only&quot; : 1&#xd;
	&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/get/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/get/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_05_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_05_TIME&quot;, requestTime);
vars.put(&quot;API_05_AUTH_HASH&quot;, hashCropped);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Count" enabled="true">
              <stringProp name="JMES_PATH">count</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.6 Bodyguard | Optional Parameters (Invalid Count)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_06_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_06_AUTH_HASH}&quot;,&#xd;
	&quot;client_id&quot;: ${API_03_CLIENT_ID},&#xd;
	&quot;imsi&quot;: &quot;${API_04_IMSI}&quot;,&#xd;
	&quot;msisdn&quot;: &quot;${API_04_MSISDN}&quot;,&#xd;
	&quot;created_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;last_changed_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;orderby&quot; : &quot;last_changed_by&quot;,&#xd;
	&quot;count_oly&quot; : &quot;&quot;&#xd;
	&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/get/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/get/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_06_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_06_TIME&quot;, requestTime);
vars.put(&quot;API_06_AUTH_HASH&quot;, hashCropped);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.get_0014</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: ERROR: Invalid Parameter(s): count_oly</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.7 Bodyguard | Optional Parameters (Invalid OrderBy)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_07_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_07_AUTH_HASH}&quot;,&#xd;
	&quot;client_id&quot;: ${API_03_CLIENT_ID},&#xd;
	&quot;imsi&quot;: &quot;${API_04_IMSI}&quot;,&#xd;
	&quot;msisdn&quot;: &quot;${API_04_MSISDN}&quot;,&#xd;
	&quot;created_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;last_changed_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_07_ORDER_BY}&quot;&#xd;
	&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/get/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/get/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_07_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_07_TIME&quot;, requestTime);
vars.put(&quot;API_07_AUTH_HASH&quot;, hashCropped);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Invalid OrderBy" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_07_ORDER_BY&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_07_ORDER_BY_ERROR_MESSAGE&quot;, &quot;ERROR: ORDERBY must be specified as a list of fields with. Use \&quot;-\&quot; prefix to reverse the order&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.get_0013</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">${API_07_ORDER_BY_ERROR_MESSAGE}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.8 Bodyguard | Optional Parameters (Invalid Client ID)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_08_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_08_AUTH_HASH}&quot;,&#xd;
	&quot;imsi&quot;: &quot;${API_04_IMSI}&quot;,&#xd;
	&quot;msisdn&quot;: &quot;${API_04_MSISDN}&quot;,&#xd;
	&quot;client_id&quot;: null,&#xd;
	&quot;created_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;last_changed_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;orderby&quot; : &quot;last_changed_by&quot;&#xd;
	&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/get/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/get/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_08_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_08_TIME&quot;, requestTime);
vars.put(&quot;API_08_AUTH_HASH&quot;, hashCropped);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.get_0014</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: ERROR: Invalid Parameter(s): client_id</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.9 Bodyguard | Get Client (Invalid IMSI)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_09_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_09_AUTH_HASH}&quot;,&#xd;
	&quot;count_only&quot;: true,&#xd;
	&quot;imsi&quot; : &quot;{API_09_IMSI}&quot;,&#xd;
	&quot;created_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;last_changed_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;orderby&quot; : &quot;last_changed_by&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/get/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/get/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_09_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_09_TIME&quot;, requestTime);
vars.put(&quot;API_09_AUTH_HASH&quot;, hashCropped);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate IMSI MSISDN" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_09_IMSI&quot;, Math.floor(Math.random()*1000000000000000));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid IMSI</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.get_0004</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.10 Bodyguard | Get Client (Invalid MSISDN)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_10_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_10_AUTH_HASH}&quot;,&#xd;
	&quot;count_only&quot;: true,&#xd;
	&quot;msisdn&quot; : &quot;{API_10_MSISDN}&quot;,&#xd;
	&quot;created_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;last_changed_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;orderby&quot; : &quot;last_changed_by&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/get/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/get/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_10_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_10_TIME&quot;, requestTime);
vars.put(&quot;API_10_AUTH_HASH&quot;, hashCropped);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate IMSI MSISDN" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_10_MSISDN&quot;, Math.floor(Math.random()*1000000000000000));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid MSISDN</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.get_0005</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.11 Bodyguard | Get Client (Invalid Created By)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_11_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_11_AUTH_HASH}&quot;,&#xd;
	&quot;count_only&quot;: true,&#xd;
	&quot;created_by&quot;: null,&#xd;
	&quot;last_changed_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;orderby&quot; : &quot;created_by&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/get/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/get/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_11_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_11_TIME&quot;, requestTime);
vars.put(&quot;API_11_AUTH_HASH&quot;, hashCropped);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: ERROR: Invalid Parameter(s): created_by</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.get_0014</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.12 Bodyguard | Get Client (Invalid Last Change By)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_12_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_12_AUTH_HASH}&quot;,&#xd;
	&quot;count_only&quot;: true,&#xd;
	&quot;created_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;last_changed_by&quot;: null,&#xd;
	&quot;orderby&quot; : &quot;last_changed_by&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/get/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/get/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_12_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_12_TIME&quot;, requestTime);
vars.put(&quot;API_12_AUTH_HASH&quot;, hashCropped);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: ERROR: Invalid Parameter(s): last_changed_by</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.get_0014</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.13 Bodyguard | Get Client (Order By Must Be Specified)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_13_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_13_AUTH_HASH}&quot;,&#xd;
	&quot;count_only&quot;: true,&#xd;
	&quot;created_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;last_changed_by&quot;: &quot;${AUTH_USER_NAME}&quot;,&#xd;
	&quot;orderby&quot; : &quot;last_change&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/get/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/get/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_13_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_13_TIME&quot;, requestTime);
vars.put(&quot;API_13_AUTH_HASH&quot;, hashCropped);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="false">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: ORDERBY must be specified as a list of fields with. Use \&quot;-\&quot; prefix to reverse the order
</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.get_0013</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.14 Bodyguard | Delete Client | ${API_03_CLIENT_ID}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_14_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_14_AUTH_HASH}&quot;,&#xd;
	&quot;client_id&quot;: ${API_03_CLIENT_ID},&#xd;
	&quot;delete&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/del/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/del/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_14_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_14_TIME&quot;, requestTime);
vars.put(&quot;API_14_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">Client Deleted successfully</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert client_id" enabled="true">
              <stringProp name="JMES_PATH">client_id</stringProp>
              <stringProp name="EXPECTED_VALUE">${API_03_CLIENT_ID}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.15 Bodyguard | Add Client with Invalid IMSI " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_15_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_15_AUTH_HASH}&quot;,&#xd;
	&quot;imsi&quot;: &quot;${API_15_IMSI}&quot;,&#xd;
	&quot;msisdn&quot;: &quot;${API_15_MSISDN}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/add/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/add/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_15_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_15_TIME&quot;, requestTime);
vars.put(&quot;API_15_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate IMSI MSISDN" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_15_IMSI&quot;, Math.random().toString(36).substring(2, 10).toUpperCase());
vars.put(&quot;API_15_MSISDN&quot;, Math.floor(Math.random()*1000000000000000));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid IMSI Format</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.add_0001</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.16 Bodyguard | Add Client with Invalid MSISDN" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_16_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_16_AUTH_HASH}&quot;,&#xd;
	&quot;imsi&quot;: &quot;${API_16_IMSI}&quot;,&#xd;
	&quot;msisdn&quot;: &quot;${API_16_MSISDN}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/add/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/add/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_16_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_16_TIME&quot;, requestTime);
vars.put(&quot;API_16_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate IMSI MSISDN" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_16_IMSI&quot;, Math.floor(Math.random()*1000000000000000));
vars.put(&quot;API_16_MSISDN&quot;, Math.random().toString(36).substring(2, 10).toUpperCase());
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid MSISDN Format</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.add_0002</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.17 Bodyguard | Add Client Invalid Parameters IMSIS" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_17_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_17_AUTH_HASH}&quot;,&#xd;
	&quot;imsis&quot;: &quot;${API_17_IMSI}&quot;,&#xd;
	&quot;msisdn&quot;: &quot;${API_17_MSISDN}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/add/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/add/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_17_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_17_TIME&quot;, requestTime);
vars.put(&quot;API_17_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate IMSI MSISDN" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_17_IMSI&quot;, Math.floor(Math.random()*1000000000000000));
vars.put(&quot;API_17_MSISDN&quot;, Math.floor(Math.random()*1000000000000000));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: ERROR: Invalid Parameter(s): imsis</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.add_0003</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.18 Bodyguard | Add Client Invalid Parameters MSISDN" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_18_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_18_AUTH_HASH}&quot;,&#xd;
	&quot;imsi&quot;: &quot;${API_18_IMSI}&quot;,&#xd;
	&quot;msisdns&quot;: &quot;${API_18_MSISDN}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/add/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/add/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_18_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_18_TIME&quot;, requestTime);
vars.put(&quot;API_18_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate IMSI MSISDN" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_18_IMSI&quot;, Math.floor(Math.random()*1000000000000000));
vars.put(&quot;API_18_MSISDN&quot;, Math.floor(Math.random()*1000000000000000));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: ERROR: Invalid Parameter(s): msisdns</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.add_0003</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.19 Bodyguard | Add Client Invalid Parameters MSISDN" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_19_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_19_AUTH_HASH}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/add/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/add/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_19_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_19_TIME&quot;, requestTime);
vars.put(&quot;API_19_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate IMSI MSISDN" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_19_IMSI&quot;, Math.floor(Math.random()*1000000000000000));
vars.put(&quot;API_19_MSISDN&quot;, Math.floor(Math.random()*1000000000000000));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: ERROR Needs IMSI or MSISDN</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.add_0004</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.20 Bodyguard | Add Client Unique IMSI" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_20_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_20_AUTH_HASH}&quot;,&#xd;
	&quot;imsi&quot;: &quot;${API_03_IMSI}&quot;,&#xd;
	&quot;msisdn&quot;: &quot;${API_20_MSISDN}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/add/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/add/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_20_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_20_TIME&quot;, requestTime);
vars.put(&quot;API_20_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate IMSI MSISDN" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_20_IMSI&quot;, Math.random().toString(36).substring(2, 10).toUpperCase());
vars.put(&quot;API_20_MSISDN&quot;, Math.floor(Math.random()*1000000000000000));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: ERROR: AN IMSI Cannot Assigned To Multiple MSISDN : </stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.add_0005</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.21 Bodyguard | Add Client Exception" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_21_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_21_AUTH_HASH}&quot;,&#xd;
	&quot;imsi&quot;: &quot;${API_21_IMSI}&quot;,&#xd;
	&quot;msisdn&quot;: &quot;${API_21_MSISDN}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/add/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/add/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,31);
vars.put(&quot;API_21_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_21_TIME&quot;, requestTime);
vars.put(&quot;API_21_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate IMSI MSISDN" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_21_IMSI&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_21_MSISDN&quot;, Math.floor(Math.random()*1000000000000000));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Authentication Token Mismatch 2</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">auth_0002</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.22 Bodyguard | Delete Client | Already Undeleted" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_22_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_22_AUTH_HASH}&quot;,&#xd;
	&quot;client_id&quot;: ${API_03_CLIENT_ID},&#xd;
	&quot;delete&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/del/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/del/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_22_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_22_TIME&quot;, requestTime);
vars.put(&quot;API_22_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Client Already Un Deleted</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.del_0005</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.23 Bodyguard | Delete Client | Invalid Delete Type" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_23_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_23_AUTH_HASH}&quot;,&#xd;
	&quot;client_id&quot;: ${API_03_CLIENT_ID},&#xd;
	&quot;deletes&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/del/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/del/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_23_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_23_TIME&quot;, requestTime);
vars.put(&quot;API_23_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Delete Type</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.del_0002</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4.24 Bodyguard | Delete Client | Invalid Client" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_24_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_24_AUTH_HASH}&quot;,&#xd;
	&quot;client_id&quot;: null,&#xd;
	&quot;delete&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/body_guard/del/client</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/body_guard/del/client&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_24_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_24_TIME&quot;, requestTime);
vars.put(&quot;API_24_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Client</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Code" enabled="true">
              <stringProp name="JMES_PATH">code</stringProp>
              <stringProp name="EXPECTED_VALUE">client.del_0001</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="5.Advanced Statistics" enabled="false">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert header no Content-Type JSON" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1510192575">Content-Type: application/json;charset=UTF-8</stringProp>
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">52</intProp>
          </ResponseAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
            <stringProp name="DurationAssertion.duration">6000</stringProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </DurationAssertion>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.1 Get Advanced Statistics | Mendatory Parameters " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_01_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_01_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_01_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_01_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;calling_gt&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_01_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_01_TIME&quot;, requestTime);
vars.put(&quot;API_01_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_01_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_01_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.2 Get Advanced Statistics | Parameter &quot;Single&quot; Count Type  " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_02_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_02_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_02_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_02_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;calling_gt&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_02_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_02_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_02_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_02_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_02_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_02_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_02_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_02_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_02_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_02_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_02_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_02_TIME&quot;, requestTime);
vars.put(&quot;API_02_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_02_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_02_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.3 Get Advanced Statistics | Parameter &quot;Action&quot; Count Type  " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_03_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_03_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_03_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_03_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;calling_gt&quot;,&#xd;
	&quot;countType&quot; : &quot;action&quot;,&#xd;
	&quot;count&quot; : ${API_03_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_03_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_03_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_03_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_03_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_03_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_03_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_03_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_03_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_03_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_03_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_03_TIME&quot;, requestTime);
vars.put(&quot;API_03_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_03_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_03_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.4 Get Advanced Statistics | Group By Time Frame  " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_04_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_04_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_04_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_04_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;time_frame&quot;,&#xd;
	&quot;countType&quot; : &quot;action&quot;,&#xd;
	&quot;count&quot; : ${API_04_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_04_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_04_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_04_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_04_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_04_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_04_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_04_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_04_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_04_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_04_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_04_TIME&quot;, requestTime);
vars.put(&quot;API_04_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_04_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_04_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.5 Get Advanced Statistics | Group By Sender ID " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_05_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_05_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_05_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_05_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;sender_id&quot;,&#xd;
	&quot;countType&quot; : &quot;action&quot;,&#xd;
	&quot;count&quot; : ${API_05_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_05_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_05_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_05_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_05_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_05_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_05_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_05_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_05_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_05_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_05_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_05_TIME&quot;, requestTime);
vars.put(&quot;API_05_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_05_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_05_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.6 Get Advanced Statistics | Group By SMSC GT" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_06_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_06_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_06_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_06_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;smsc_gt&quot;,&#xd;
	&quot;countType&quot; : &quot;action&quot;,&#xd;
	&quot;count&quot; : ${API_06_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_06_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_06_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_06_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_06_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_06_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_06_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_06_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_06_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_06_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_06_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_06_TIME&quot;, requestTime);
vars.put(&quot;API_06_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_06_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_06_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.7 Get Advanced Statistics | Group By Packet Type" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_07_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_07_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_07_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_07_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;packet_type&quot;,&#xd;
	&quot;countType&quot; : &quot;action&quot;,&#xd;
	&quot;count&quot; : ${API_07_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_07_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_07_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_07_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_07_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_07_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_07_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_07_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_07_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_07_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_07_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_07_TIME&quot;, requestTime);
vars.put(&quot;API_07_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_07_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_07_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.8 Get Advanced Statistics | Group By Final Action" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_08_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_08_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_08_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_08_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_08_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_08_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_08_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_08_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_08_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_08_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_08_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_08_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_08_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_08_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_08_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_08_TIME&quot;, requestTime);
vars.put(&quot;API_08_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_08_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_08_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.9 Get Advanced Statistics | Timeframe START Invalid Unix Timestamp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_09_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_09_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_09_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_09_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_09_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_09_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_09_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_09_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_09_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_09_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_09_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_09_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_09_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_09_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /100);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_09_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_09_TIME&quot;, requestTime);
vars.put(&quot;API_09_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_09_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_09_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Timeframe START should be a valid Unix Timestamp</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.10 Get Advanced Statistics | Timeframe END Invalid Unix Timestamp" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_10_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_10_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_10_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_10_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_10_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_10_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_10_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_10_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_10_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_10_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_10_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_10_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_10_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_10_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 100);
vars.put(&quot;API_10_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_10_TIME&quot;, requestTime);
vars.put(&quot;API_10_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_10_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_10_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Timeframe END should be a valid Unix Timestamp</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.11 Get Advanced Statistics | Invalid Interval" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_11_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_11_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_11_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_11_TO_TIME},&#xd;
	&quot;interval&quot; : NULL,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_11_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_11_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_11_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_11_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_11_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_11_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_11_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_11_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_11_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_11_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_11_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_11_TIME&quot;, requestTime);
vars.put(&quot;API_11_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_11_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_11_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Interval</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.12 Get Advanced Statistics | Invalid Scale" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_12_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_12_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_12_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_12_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : NULL,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_12_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_12_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_12_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_12_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_12_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_12_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_12_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_12_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_12_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_12_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_12_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_12_TIME&quot;, requestTime);
vars.put(&quot;API_12_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_12_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_12_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Scale</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.13 Get Advanced Statistics | Invalid Colour" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_13_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_13_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_13_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_13_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;interval&quot;,&#xd;
	&quot;colour&quot; : NULL,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_13_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_13_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_13_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_13_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_13_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_13_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_13_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_13_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_13_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_13_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_13_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_13_TIME&quot;, requestTime);
vars.put(&quot;API_13_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_13_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_13_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Colour</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.14 Get Advanced Statistics | Invalid Count" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_14_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_14_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_14_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_14_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;interval&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : null,&#xd;
	&quot;sid_type&quot; : ${API_14_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_14_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_14_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_14_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_14_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_14_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_14_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_14_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_14_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_14_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_14_TIME&quot;, requestTime);
vars.put(&quot;API_14_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_14_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_14_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): count</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.15 Get Advanced Statistics | Invalid SID Type" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_15_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_15_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_15_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_15_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;interval&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_15_COUNT},&#xd;
	&quot;sid_type&quot; : null,&#xd;
	&quot;des_id&quot; : ${API_15_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_15_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_15_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_15_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_15_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_15_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_15_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_15_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_15_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_15_TIME&quot;, requestTime);
vars.put(&quot;API_15_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_15_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_15_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): sid_type</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.16 Get Advanced Statistics | Invalid DES" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_16_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_16_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_16_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_16_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;interval&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_16_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_16_SID_TYPE},&#xd;
	&quot;des_id&quot; : null,&#xd;
	&quot;packet_type&quot; : ${API_16_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_16_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_16_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_16_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_16_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_16_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_16_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_16_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_16_TIME&quot;, requestTime);
vars.put(&quot;API_16_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_16_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_16_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): des_id</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.17 Get Advanced Statistics | Invalid Packet Type" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_17_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_17_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_17_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_17_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;interval&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_17_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_17_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_17_DES_ID},&#xd;
	&quot;packet_type&quot; : null,&#xd;
	&quot;action_id&quot; : ${API_17_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_17_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_17_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_17_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_17_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_17_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_17_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_17_TIME&quot;, requestTime);
vars.put(&quot;API_17_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_17_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_17_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): packet_type</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.18 Get Advanced Statistics | Invalid Action ID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_18_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_18_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_18_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_18_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;interval&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_18_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_18_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_18_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_18_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : null&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_18_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_18_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_18_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_18_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_18_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_18_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_18_TIME&quot;, requestTime);
vars.put(&quot;API_18_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_18_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_18_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): action_id</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.19 Get Advanced Statistics | Invalid PAGENUM Format" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_19_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_19_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_19_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_19_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;interval&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_19_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_19_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_19_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_19_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_19_ACTION_ID},&#xd;
	&quot;pagenum&quot; : &quot;${API_19_PAGENUM_FORMAT}&quot;&#xd;
	&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_19_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_19_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_19_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_19_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_19_ACTION_ID&quot;, Math.floor(Math.random()*4));
vars.put(&quot;API_19_PAGENUM_FORMAT&quot;, Math.random().toString(36).substring(2, 10).toUpperCase());

</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_19_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_19_TIME&quot;, requestTime);
vars.put(&quot;API_19_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_19_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_19_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid PAGENUM Format. It must be a number.</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.20 Get Advanced Statistics | Invalid PAGESIZE Format" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_20_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_20_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_20_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_20_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;interval&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_20_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_20_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_20_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_20_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_20_ACTION_ID},&#xd;
	&quot;pagenum&quot; : &quot;${API_20_PAGENUM_FORMAT}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_20_PAGESIZE_FORMAT}&quot;&#xd;
	&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_20_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_20_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_20_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_20_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_20_ACTION_ID&quot;, Math.floor(Math.random()*4));
vars.put(&quot;API_20_PAGENUM_FORMAT&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_20_PAGESIZE_FORMAT&quot;, Math.random().toString(36).substring(2, 10).toUpperCase());

</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_20_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_20_TIME&quot;, requestTime);
vars.put(&quot;API_20_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_20_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_20_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid PAGESIZE Format. It must be a number.</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.21 Get Advanced Statistics | Invalid Colour Value" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_21_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_21_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_21_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_21_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;month&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;yellow&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_21_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_21_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_21_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_21_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_21_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_21_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_21_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_21_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_21_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_21_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_21_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_21_TIME&quot;, requestTime);
vars.put(&quot;API_21_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_21_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_21_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Colour Value</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.22 Get Advanced Statistics | Invalid Interval Value" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_22_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_22_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_22_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_22_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;year&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_22_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_22_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_22_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_22_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_22_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_22_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_22_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_22_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_22_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_22_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_22_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_22_TIME&quot;, requestTime);
vars.put(&quot;API_22_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_22_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_22_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Interval Value</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.23 Get Advanced Statistics | Invalid Calling GTs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_23_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_23_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_23_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_23_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;month&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : &quot;${API_23_COUNT}&quot;,&#xd;
	&quot;sid_type&quot; : ${API_23_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_23_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_23_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_23_ACTION_ID},&#xd;
	&quot;calling_gt&quot; : &quot;${API_23_CALLING_GT}&quot; &#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_23_COUNT&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_23_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_23_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_23_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_23_ACTION_ID&quot;, Math.floor(Math.random()*4));
vars.put(&quot;API_23_CALLING_GT&quot;, Math.random().toString(36).substring(2, 10).toUpperCase() + Math.floor(Math.random()*100));

</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_23_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_23_TIME&quot;, requestTime);
vars.put(&quot;API_23_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_23_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_23_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Calling GT&apos;s</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.24 Get Advanced Statistics | Invalid Scale Value" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_24_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_24_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_24_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_24_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;minute&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_24_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_24_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_24_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_24_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_24_ACTION_ID}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_24_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_24_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_24_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_24_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_24_ACTION_ID&quot;, Math.floor(Math.random()*4));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_24_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_24_TIME&quot;, requestTime);
vars.put(&quot;API_24_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_24_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_24_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Scale Value</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.25 Get Advanced Statistics | Invalid Group By" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_25_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_25_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_25_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_25_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;day&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : ${API_25_COUNT},&#xd;
	&quot;sid_type&quot; : ${API_25_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_25_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_25_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : &quot;${API_25_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_25_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_25_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_25_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_25_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_25_ACTION_ID&quot;, Math.floor(Math.random()*4));
vars.put(&quot;API_25_INVALID_GROUP_BY&quot;, Math.random().toString(36).substring(2, 10).toUpperCase());
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_25_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_25_TIME&quot;, requestTime);
vars.put(&quot;API_25_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_25_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_25_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Group By</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.26 Get Advanced Statistics | Invalid SMSC GTs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_26_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_26_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_26_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_26_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;month&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : &quot;${API_26_COUNT}&quot;,&#xd;
	&quot;sid_type&quot; : ${API_26_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_26_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_26_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_26_ACTION_ID},&#xd;
	&quot;smsc_gt&quot; : &quot;${API_26_SMSC_GT}&quot; &#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_26_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_26_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_26_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_26_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_26_ACTION_ID&quot;, Math.floor(Math.random()*4));
vars.put(&quot;API_26_SMSC_GT&quot;, Math.random().toString(36).substring(2, 10).toUpperCase() + Math.floor(Math.random()*100));

</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_26_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_26_TIME&quot;, requestTime);
vars.put(&quot;API_26_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_26_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_26_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Smsc GT&apos;s</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5.27 Get Advanced Statistics | Invalid Sender IDs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_27_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_27_AUTH_HASH}&quot;,&#xd;
	&quot;from&quot; : ${API_27_FROM_TIME},&#xd;
	&quot;to&quot; : ${API_27_TO_TIME},&#xd;
	&quot;interval&quot; : &quot;month&quot;,&#xd;
	&quot;scale&quot; : &quot;second&quot;,&#xd;
	&quot;colour&quot; : &quot;green&quot;,&#xd;
	&quot;grp_by&quot; : &quot;final_action&quot;,&#xd;
	&quot;countType&quot; : &quot;single&quot;,&#xd;
	&quot;count&quot; : &quot;${API_27_COUNT}&quot;,&#xd;
	&quot;sid_type&quot; : ${API_27_SID_TYPE},&#xd;
	&quot;des_id&quot; : ${API_27_DES_ID},&#xd;
	&quot;packet_type&quot; : ${API_27_PACKET_TYPE},&#xd;
	&quot;action_id&quot; : ${API_27_ACTION_ID},&#xd;
	&quot;sender_id&quot; : &quot;${API_27_SENDER_ID}&quot; &#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/advstats/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Count,Sid_Type,Desc_Id,Packet_Type,Action_Id" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_27_COUNT&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_27_SID_TYPE&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_27_DES_ID&quot;, Math.floor((Math.random()*3) + 1));
vars.put(&quot;API_27_PACKET_TYPE&quot;, Math.floor(Math.random()*8));
vars.put(&quot;API_27_ACTION_ID&quot;, Math.floor(Math.random()*4));
vars.put(&quot;API_27_SENDER_ID&quot;, Math.floor(100000000000000000000 + Math.random() * 900000));

</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/advstats/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_27_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_27_TIME&quot;, requestTime);
vars.put(&quot;API_27_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_27_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_27_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Sender Id&apos;s</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
              <stringProp name="DurationAssertion.duration">4000</stringProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </DurationAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6.HardBlock SID" enabled="true">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert header no Content-Type JSON" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1510192575">Content-Type: application/json;charset=UTF-8</stringProp>
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">52</intProp>
          </ResponseAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
            <stringProp name="DurationAssertion.duration">6000</stringProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </DurationAssertion>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.1 HardBlock_SID | Add Parameter (Mendatory)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_01_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_01_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_01_SID},&#xd;
	&quot;action&quot;: ${API_01_ACTION},&#xd;
	&quot;is_prefix&quot;: ${API_01_IS_PREFIX}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_01_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_01_TIME&quot;, requestTime);
vars.put(&quot;API_01_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_01_SID&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_01_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_01_IS_PREFIX&quot;, 1);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">Parameter Added successfully</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.2 HardBlock_SID | Add Parameter (Mendatory + Optional)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_02_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_02_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_02_SID},&#xd;
	&quot;action&quot;: ${API_02_ACTION},&#xd;
	&quot;is_prefix&quot;: ${API_02_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_02_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_02_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_02_TIME&quot;, requestTime);
vars.put(&quot;API_02_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_02_SID&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_02_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_02_IS_PREFIX&quot;, 1);
vars.put(&quot;API_02_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">Parameter Added successfully</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.3 HardBlock_SID | Add Parameter (Alpha_Numeric_SID)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_03_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_03_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: &quot;${API_03_SID}&quot;,&#xd;
	&quot;action&quot;: ${API_03_ACTION},&#xd;
	&quot;is_prefix&quot;: ${API_03_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_03_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_03_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_03_TIME&quot;, requestTime);
vars.put(&quot;API_03_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_03_SID&quot;, Math.random().toString(36).substring(2, 10).toUpperCase());
vars.put(&quot;API_03_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_03_IS_PREFIX&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_03_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">Parameter Added successfully</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.4 HardBlock_SID | Add Parameter (Invalid SID Format))" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_04_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_04_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: &quot;${API_04_SID}&quot;,&#xd;
	&quot;action&quot;: ${API_04_ACTION},&#xd;
	&quot;is_prefix&quot;: ${API_04_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_04_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_04_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_04_TIME&quot;, requestTime);
vars.put(&quot;API_04_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_04_SID&quot;, Math.floor(100000000000000000000 + Math.random() * 900000));
vars.put(&quot;API_04_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_04_IS_PREFIX&quot;, 1);
vars.put(&quot;API_04_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid SID Format</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.5 HardBlock_SID | Add Parameter (Invalid SID Format_2))" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_05_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_05_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: &quot;${API_05_SID}&quot;,&#xd;
	&quot;action&quot;: ${API_05_ACTION},&#xd;
	&quot;is_prefix&quot;: ${API_05_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_05_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_05_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_05_TIME&quot;, requestTime);
vars.put(&quot;API_05_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_05_SID&quot;, &apos;&apos;);
vars.put(&quot;API_05_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_05_IS_PREFIX&quot;, 1);
vars.put(&quot;API_05_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid SID Format</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.6 HardBlock_SID | Add Parameter (Invalid SID Format_3))" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_06_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_06_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: &quot;${API_06_SID}&quot;,&#xd;
	&quot;action&quot;: ${API_06_ACTION},&#xd;
	&quot;is_prefix&quot;: ${API_06_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_06_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_06_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_06_TIME&quot;, requestTime);
vars.put(&quot;API_06_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_06_SID&quot;, Math.random().toString(36).substring(2, 10).toUpperCase() + &quot; &quot; + Math.floor(Math.random()*100));
vars.put(&quot;API_06_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_06_IS_PREFIX&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_06_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">Parameter Added successfully</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.7 HardBlock_SID | Add Parameter (Invalid Prefix Type)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_07_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_07_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_07_SID},&#xd;
	&quot;action&quot;: ${API_07_ACTION},&#xd;
	&quot;is_prefix&quot;: ${API_07_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_07_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_07_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_07_TIME&quot;, requestTime);
vars.put(&quot;API_07_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_07_SID&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_07_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_07_IS_PREFIX&quot;, Math.floor(Math.random() *5) + 2);
vars.put(&quot;API_07_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Prefix Type</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.8 HardBlock_SID | Add Parameter (Invalid Prefix Type 2)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_08_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_08_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_08_SID},&#xd;
	&quot;action&quot;: ${API_08_ACTION},&#xd;
	&quot;is_prefix&quot;: &quot;${API_08_IS_PREFIX}&quot;,&#xd;
	&quot;note&quot;: &quot;${API_08_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_08_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_08_TIME&quot;, requestTime);
vars.put(&quot;API_08_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_08_SID&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_08_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_08_IS_PREFIX&quot;, &quot;&quot;);
vars.put(&quot;API_08_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Prefix Type</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.9 HardBlock_SID | Add Parameter (Invalid Action 1)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_09_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_09_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_09_SID},&#xd;
	&quot;action&quot;: &quot;${API_09_ACTION}&quot;,&#xd;
	&quot;is_prefix&quot;: ${API_09_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_09_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_09_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_09_TIME&quot;, requestTime);
vars.put(&quot;API_09_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_09_SID&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_09_ACTION&quot;, Math.random().toString(36).substring(2, 10).toUpperCase());;
vars.put(&quot;API_09_IS_PREFIX&quot;, 1);
vars.put(&quot;API_09_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Action</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.10 HardBlock_SID | Add Parameter (Invalid Action 2)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_10_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_10_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_10_SID},&#xd;
	&quot;action&quot;: &quot;${API_10_ACTION}&quot;,&#xd;
	&quot;is_prefix&quot;: ${API_10_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_10_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_10_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_10_TIME&quot;, requestTime);
vars.put(&quot;API_10_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_10_SID&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_10_ACTION&quot;, &quot;&quot;);
vars.put(&quot;API_10_IS_PREFIX&quot;, 1);
vars.put(&quot;API_10_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Action</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.11 HardBlock_SID | Add Parameter (Note Value Exceeds 200 Characters)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_11_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_11_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_11_SID},&#xd;
	&quot;action&quot;: ${API_11_ACTION},&#xd;
	&quot;is_prefix&quot;: ${API_11_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_11_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_11_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_11_TIME&quot;, requestTime);
vars.put(&quot;API_11_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_11_SID&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_11_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_11_IS_PREFIX&quot;, 1);
vars.put(&quot;API_11_NOTE&quot;, Math.random().toString(36).substring(2, 250) + 
Math.random().toString(36).substring(2, 15) +
Math.random().toString(36).substring(2, 15) + 
Math.random().toString(36).substring(2, 15) +
Math.random().toString(36).substring(2, 15) + 
Math.random().toString(36).substring(2, 15) + 
Math.random().toString(36).substring(2, 15) +
Math.random().toString(36).substring(2, 15) + 
Math.random().toString(36).substring(2, 15) + 
Math.random().toString(36).substring(2, 15) + 
Math.random().toString(36).substring(2, 15) + 
Math.random().toString(36).substring(2, 15) + 
Math.random().toString(36).substring(2, 15) + 
Math.random().toString(36).substring(2, 15) + 
Math.random().toString(36).substring(2, 15));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Note can be of Max 200 Characters </stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.12 HardBlock_SID | Add Parameter (SID already existed)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_12_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_12_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: &quot;${API_01_SID}&quot;,&#xd;
	&quot;action&quot;: ${API_12_ACTION},&#xd;
	&quot;is_prefix&quot;: ${API_12_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_12_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_12_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_12_TIME&quot;, requestTime);
vars.put(&quot;API_12_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_12_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_12_IS_PREFIX&quot;, 1);
vars.put(&quot;API_12_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: The Sender ID &apos;${API_01_SID}&apos; already exists in HardBlock SID</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.13 HardBlock_SID | Add Parameter (Invalid Action Value)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_13_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_13_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_13_SID},&#xd;
	&quot;action&quot;: ${API_13_ACTION},&#xd;
	&quot;is_prefix&quot;: ${API_13_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_13_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_13_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_13_TIME&quot;, requestTime);
vars.put(&quot;API_13_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_13_SID&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_13_ACTION&quot;, Math.floor(Math.random()*10) + 5);
vars.put(&quot;API_13_IS_PREFIX&quot;, 1);
vars.put(&quot;API_13_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Action Value</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.14 HardBlock_SID | Add Parameter (Error Message)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_14_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_14_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_14_SID},&#xd;
	&quot;action&quot;: ${API_14_ACTION},&#xd;
	&quot;is_prefix&quot;: ${API_14_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_14_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add/&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_14_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_14_TIME&quot;, requestTime);
vars.put(&quot;API_14_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_14_SID&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_14_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_14_IS_PREFIX&quot;, 1);
vars.put(&quot;API_14_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Authentication Token Mismatch 2</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.15 HardBlock_SID | Add Parameter (Invalid Parameters with Note)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_15_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_15_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_15_SID},&#xd;
	&quot;action&quot;: ${API_15_ACTION},&#xd;
	&quot;is_prefix&quot;: ${API_15_IS_PREFIX},&#xd;
	&quot;notes&quot;: &quot;${API_15_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_15_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_15_TIME&quot;, requestTime);
vars.put(&quot;API_15_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_15_SID&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_15_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_15_IS_PREFIX&quot;, 1);
vars.put(&quot;API_15_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): notes</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.16 HardBlock_SID | Add Parameter (Invalid Parameters with IS_PREFIX)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_16_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_16_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_16_SID},&#xd;
	&quot;action&quot;: ${API_16_ACTION},&#xd;
	&quot;is_prefixis&quot;: ${API_16_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_16_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_16_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_16_TIME&quot;, requestTime);
vars.put(&quot;API_16_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_16_SID&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_16_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_16_IS_PREFIX&quot;, 1);
vars.put(&quot;API_16_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): is_prefixis</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.17 HardBlock_SID | Add Parameter (Check if prefix option set for Numeric SIDs)" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_17_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_17_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: &quot;${API_17_SID}&quot;,&#xd;
	&quot;action&quot;: ${API_17_ACTION},&#xd;
	&quot;is_prefix&quot;: ${API_17_IS_PREFIX},&#xd;
	&quot;note&quot;: &quot;${API_17_NOTE}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_17_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_17_TIME&quot;, requestTime);
vars.put(&quot;API_17_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_17_SID&quot;, &quot;Face-&quot; + Math.floor(Math.random()*100));
vars.put(&quot;API_17_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_17_IS_PREFIX&quot;, 1);
vars.put(&quot;API_17_NOTE&quot;, &quot;Test_&quot; + Math.floor(Math.random()*100));</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Prefix Option can only be set for Numeric SIDs</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.18 HardBlock_SID | Add Parameter" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_18_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_18_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_18_SID},&#xd;
	&quot;action&quot;: ${API_18_ACTION},&#xd;
	&quot;case_insensitive&quot;: ${API_18_CASE_INSENSITIVE},&#xd;
	&quot;is_prefix&quot;: ${API_18_IS_PREFIX}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/add</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/add&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_18_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_18_TIME&quot;, requestTime);
vars.put(&quot;API_18_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate SID Action" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_18_SID&quot;, Math.floor(Math.random()*100000000000));
vars.put(&quot;API_18_ACTION&quot;, Math.floor(Math.random()*2));
vars.put(&quot;API_18_IS_PREFIX&quot;, 1);
vars.put(&quot;API_18_CASE_INSENSITIVE&quot;, 1);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">Parameter Added successfully</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.19 HardBlock_SID | Get SID Parameter (Mendatory)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_19_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_19_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_18_SID}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/get</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/get&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_19_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_19_TIME&quot;, requestTime);
vars.put(&quot;API_19_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="6.20 HardBlock_SID | Delete SID Parameter" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot;: ${AUTH_ID},&#xd;
	&quot;req_time&quot;: ${API_20_TIME},&#xd;
	&quot;req_hash&quot;: &quot;${API_20_AUTH_HASH}&quot;,&#xd;
	&quot;sid&quot;: ${API_18_SID}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/hbsid/delete</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/hbsid/delete&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
vars.put(&quot;API_20_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_20_TIME&quot;, requestTime);
vars.put(&quot;API_20_AUTH_HASH&quot;, hashCropped);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="7.Rule Statistics" enabled="false">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert header no Content-Type JSON" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1510192575">Content-Type: application/json;charset=UTF-8</stringProp>
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">52</intProp>
          </ResponseAssertion>
          <hashTree/>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
            <stringProp name="DurationAssertion.duration">6000</stringProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </DurationAssertion>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.1 Get Rule Statistics By Minute | Mendatory Parameters " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_01_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_01_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_01_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_01_TO_TIME}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/minute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/minute&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_01_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_01_TIME&quot;, requestTime);
vars.put(&quot;API_01_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_01_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_01_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.2 Get Rule Statistics By Hour | Mendatory Parameters " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_02_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_02_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_02_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_02_TO_TIME}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/hour</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/hour&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_02_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_02_TIME&quot;, requestTime);
vars.put(&quot;API_02_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_02_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_02_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.3 Get Rule Statistics By Day | Mendatory Parameters " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_03_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_03_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_03_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_03_TO_TIME}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/day</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/day&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_03_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_03_TIME&quot;, requestTime);
vars.put(&quot;API_03_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_03_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_03_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.4 Get Rule Statistics By Month | Mendatory Parameters " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_04_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_04_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_04_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_04_TO_TIME}&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/month</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/month&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_04_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_04_TIME&quot;, requestTime);
vars.put(&quot;API_04_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_04_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_04_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.5 Get Rule Statistics By Minute | OPTIONAL Parameters " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_05_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_05_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_05_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_05_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_05_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_05_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_05_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_05_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_05_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_05_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_05_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_05_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_05_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_05_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_05_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_05_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_05_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/minute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/minute&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_05_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_05_TIME&quot;, requestTime);
vars.put(&quot;API_05_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_05_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_05_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_05_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_05_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_05_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_05_ST_COUNT&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_05_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_05_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_05_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_05_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_05_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_05_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_05_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_05_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_05_ORDER_BY&quot;, &quot;time_frame&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.6 Get Rule Statistics By Hour | OPTIONAL Parameters " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_06_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_06_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_06_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_06_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_06_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_06_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_06_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_06_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_06_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_06_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_06_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_06_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_06_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_06_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_06_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_06_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_06_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/hour</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/hour&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_06_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_06_TIME&quot;, requestTime);
vars.put(&quot;API_06_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_06_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_06_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_06_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_06_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_06_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_06_ST_COUNT&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_06_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_06_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_06_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_06_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_06_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_06_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_06_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_06_PAGESIZE&quot;, Math.floor((Math.random()*100) +1));
vars.put(&quot;API_06_ORDER_BY&quot;, &quot;time_frame&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.7 Get Rule Statistics By Day | OPTIONAL Parameters " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_07_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_07_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_07_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_07_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_07_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_07_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_07_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_07_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_07_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_07_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_07_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_07_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_07_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_07_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_07_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_07_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_07_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/day</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/day&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_07_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_07_TIME&quot;, requestTime);
vars.put(&quot;API_07_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_07_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_07_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_07_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_07_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_07_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_07_ST_COUNT&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_07_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_07_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_07_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_07_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_07_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_07_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_07_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_07_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_07_ORDER_BY&quot;, &quot;time_frame&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.8 Get Rule Statistics By Month | OPTIONAL Parameters " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_08_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_08_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_08_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_08_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_08_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_08_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_08_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_08_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_08_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_08_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_08_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_08_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_08_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_08_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_08_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_08_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_08_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/month</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/month&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_08_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_08_TIME&quot;, requestTime);
vars.put(&quot;API_08_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_08_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_08_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_08_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_08_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_08_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_08_ST_COUNT&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_08_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_08_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_08_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_08_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_08_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_08_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_08_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_08_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_08_ORDER_BY&quot;, &quot;time_frame&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">OK</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.9 Get Rule Statistics | Invalid START Timeframe" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_09_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_09_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_09_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_09_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_09_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_09_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_09_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_09_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_09_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_09_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_09_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_09_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_09_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_09_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_09_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_09_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_09_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/month</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/month&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /100);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_09_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_09_TIME&quot;, requestTime);
vars.put(&quot;API_09_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_09_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_09_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_09_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_09_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_09_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_09_ST_COUNT&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_09_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_09_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_09_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_09_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_09_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_09_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_09_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_09_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_09_ORDER_BY&quot;, &quot;time_frame&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Timeframe START should be a valid Unix Timestamp</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.10 Get Rule Statistics | Invalid END Timeframe" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_10_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_10_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_10_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_10_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_10_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_10_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_10_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_10_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_10_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_10_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_10_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_10_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_10_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_10_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_10_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_10_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_10_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/month</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/month&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 100);
vars.put(&quot;API_10_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_10_TIME&quot;, requestTime);
vars.put(&quot;API_10_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_10_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_10_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_10_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_10_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_10_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_10_ST_COUNT&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_10_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_10_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_10_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_10_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_10_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_10_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_10_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_10_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_10_ORDER_BY&quot;, &quot;time_frame&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Timeframe END should be a valid Unix Timestamp</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.11 Get Rule Statistics | Invalid PAGENUM Format" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_11_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_11_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_11_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_11_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_11_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_11_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_11_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_11_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_11_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_11_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_11_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_11_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_11_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_11_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_11_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_11_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_11_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/month</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/month&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_11_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_11_TIME&quot;, requestTime);
vars.put(&quot;API_11_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_11_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_11_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_11_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_11_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_11_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_11_ST_COUNT&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_11_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_11_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_11_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_11_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_11_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_11_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_11_PAGENUM&quot;, Math.random().toString(36).substring(2, 10).toUpperCase());
vars.put(&quot;API_11_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_11_ORDER_BY&quot;, &quot;time_frame&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid PAGENUM Format. It must be a number.</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.12 Get Rule Statistics | Invalid PAGESIZE Format" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_12_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_12_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_12_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_12_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_12_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_12_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_12_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_12_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_12_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_12_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_12_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_12_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_12_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_12_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_12_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_12_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_12_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/month</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/month&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_12_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_12_TIME&quot;, requestTime);
vars.put(&quot;API_12_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_12_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_12_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_12_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_12_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_12_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_12_ST_COUNT&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_12_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_12_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_12_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_12_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_12_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_12_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_12_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_12_PAGESIZE&quot;, Math.random().toString(36).substring(2, 10).toUpperCase());
vars.put(&quot;API_12_ORDER_BY&quot;, &quot;time_frame&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid PAGESIZE Format. It must be a number.</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.13 Get Rule Statistics | Invalid Calling GT " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_13_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_13_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_13_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_13_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_13_MODULE_ID},&#xd;
	&quot;calling_gt&quot; : &quot;${API_13_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_13_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_13_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_13_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_13_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_13_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_13_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_13_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_13_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_13_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_13_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_13_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/hour</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/hour&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_13_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_13_TIME&quot;, requestTime);
vars.put(&quot;API_13_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_13_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_13_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_13_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_13_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_13_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_13_ST_COUNT&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_13_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_13_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_13_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_13_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_13_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_13_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_13_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_13_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_13_ORDER_BY&quot;, &quot;time_frame&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): calling_gt</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.14 Get Rule Statistics | Invalid SMSC GT " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_14_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_14_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_14_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_14_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_14_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_14_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_gt_id&quot; : &quot;${API_14_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_14_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_14_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_14_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_14_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_14_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_14_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_14_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_14_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_14_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_14_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/hour</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/hour&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_14_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_14_TIME&quot;, requestTime);
vars.put(&quot;API_14_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_14_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_14_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_14_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_14_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_14_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_14_ST_COUNT&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_14_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_14_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_14_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_14_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_14_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_14_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_14_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_14_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_14_ORDER_BY&quot;, &quot;time_frame&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): smsc_gt_id</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.15 Get Rule Statistics | Invalid ST Count " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_15_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_15_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_15_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_15_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_15_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_15_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_15_SMSC_ID}&quot;,&#xd;
	&quot;st_counts&quot; : &quot;${API_15_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_15_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_15_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_15_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_15_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_15_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_15_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_15_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_15_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_15_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/hour</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/hour&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_15_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_15_TIME&quot;, requestTime);
vars.put(&quot;API_15_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_15_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_15_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_15_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_15_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_15_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_15_ST_COUNT&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_15_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_15_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_15_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_15_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_15_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_15_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_15_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_15_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_15_ORDER_BY&quot;, &quot;time_frame&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): st_counts</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.16 Get Rule Statistics | Invalid Action ID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_16_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_16_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_16_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_16_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_16_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_16_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_16_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_16_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_16_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_16_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_16_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_16_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_16_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_16_ORDER_BY}&quot;,&#xd;
	&quot;action_ids&quot; : &quot;${API_16_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_16_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_16_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/hour</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/hour&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_16_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_16_TIME&quot;, requestTime);
vars.put(&quot;API_16_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_16_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_16_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_16_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_16_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_16_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_16_ST_COUNT&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_16_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_16_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_16_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_16_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_16_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_16_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_16_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_16_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_16_ORDER_BY&quot;, &quot;time_frame&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): action_ids</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.17 Get Rule Statistics | Invalid Sender ID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_17_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_17_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_17_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_17_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_17_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_17_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_17_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_17_ST_COUNT}&quot;,&#xd;
	&quot;sid_ids&quot; : &quot;${API_17_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_17_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_17_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_17_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_17_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_17_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_17_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_17_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_17_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/minute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/minute&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_17_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_17_TIME&quot;, requestTime);
vars.put(&quot;API_17_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_17_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_17_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_17_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_17_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_17_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_17_ST_COUNT&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_17_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_17_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_17_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_17_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_17_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_17_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_17_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_17_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_17_ORDER_BY&quot;, &quot;time_frame&quot;);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): sid_ids</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.18 Get Rule Statistics | Invalid Module" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_18_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_18_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_18_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_18_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_18_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_18_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_18_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_18_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_18_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_18_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_18_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_18_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_18_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_18_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_18_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_18_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_18_MOD_ACTION_ID}&quot;,&#xd;
	&quot;module_name&quot; : &quot;${API_18_MODULE}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/minute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/minute&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_18_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_18_TIME&quot;, requestTime);
vars.put(&quot;API_18_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_18_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_18_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_18_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_18_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_18_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_18_ST_COUNT&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_18_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_18_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_18_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_18_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_18_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_18_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_18_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_18_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_18_ORDER_BY&quot;, &quot;time_frame&quot;);
vars.put(&quot;API_18_MODULE&quot;, Math.floor(Math.random()*10000000000));
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): module_name</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.19 Get Rule Statistics | Invalid Rule ID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_19_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_19_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_19_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_19_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_19_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_19_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_19_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_19_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_19_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_19_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_19_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_19_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_19_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_19_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_19_ACTION_ID}&quot;,&#xd;
	&quot;rule_ids&quot; : &quot;${API_19_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_19_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/minute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/minute&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_19_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_19_TIME&quot;, requestTime);
vars.put(&quot;API_19_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_19_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_19_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_19_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_19_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_19_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_19_ST_COUNT&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_19_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_19_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_19_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_19_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_19_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_19_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_19_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_19_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_19_ORDER_BY&quot;, &quot;time_frame&quot;);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): rule_ids</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.20 Get Rule Statistics | Invalid Module Action ID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_20_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_20_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_20_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_20_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_20_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_20_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_20_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_20_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_20_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_20_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_20_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_20_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_20_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_20_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_20_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_20_RULE_ID}&quot;,&#xd;
	&quot;mod_action_ids&quot; : &quot;${API_20_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/minute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/minute&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_20_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_20_TIME&quot;, requestTime);
vars.put(&quot;API_20_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_20_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_20_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_20_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_20_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_20_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_20_ST_COUNT&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_20_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_20_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_20_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_20_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_20_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_20_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_20_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_20_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_20_ORDER_BY&quot;, &quot;time_frame&quot;);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Parameter(s): mod_action_ids</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="7.21 Get Rule Statistics | Invalid Order By" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;token_id&quot; : ${AUTH_ID},&#xd;
	&quot;req_time&quot; : ${API_21_TIME},&#xd;
	&quot;req_hash&quot; : &quot;${API_21_AUTH_HASH}&quot;,&#xd;
	&quot;start&quot; : ${API_21_FROM_TIME},&#xd;
	&quot;end&quot; : ${API_21_TO_TIME},&#xd;
	&quot;module_id&quot; : ${API_21_MODULE_ID},&#xd;
	&quot;calling_gt_id&quot; : &quot;${API_21_CALLING_GT_ID}&quot;,&#xd;
	&quot;smsc_id&quot; : &quot;${API_21_SMSC_ID}&quot;,&#xd;
	&quot;st_count&quot; : &quot;${API_21_ST_COUNT}&quot;,&#xd;
	&quot;sid_id&quot; : &quot;${API_21_SID_ID}&quot;,&#xd;
	&quot;sms_type_id&quot; : &quot;${API_21_SMS_TYPE_ID}&quot;,&#xd;
	&quot;count_only&quot; : &quot;${API_21_COUNT_ONLY}&quot;,&#xd;
	&quot;pagenum&quot; : &quot;${API_21_PAGENUM}&quot;,&#xd;
	&quot;pagesize&quot; : &quot;${API_21_PAGESIZE}&quot;,&#xd;
	&quot;orderby&quot; : &quot;${API_21_ORDER_BY}&quot;,&#xd;
	&quot;action_id&quot; : &quot;${API_21_ACTION_ID}&quot;,&#xd;
	&quot;rule_id&quot; : &quot;${API_21_RULE_ID}&quot;,&#xd;
	&quot;mod_action_id&quot; : &quot;${API_21_MOD_ACTION_ID}&quot;&#xd;
	&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/rules/minute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate API Auth" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
var requestToken = vars.get(&quot;AUTH_KEY&quot;);
var requestTime = Math.floor(Date.now() / 1000);
var requestUrlPath = &quot;/api/v2/rules/minute&quot;;
var hashString =  requestUrlPath+&quot;::&quot;+requestTime+&quot;::&quot;+requestToken;
var hash = org.apache.commons.codec.digest.DigestUtils.sha256Hex(hashString);
var hashCropped = hash.substring(0,32);
var fromDate = Math.floor((Date.now() - 864e5) /1000);
var toDate = Math.floor(Date.now() / 1000);
vars.put(&quot;API_21_AUTH_HASH_STRING&quot;, hashString);
vars.put(&quot;API_21_TIME&quot;, requestTime);
vars.put(&quot;API_21_AUTH_HASH&quot;, hashCropped);
vars.put(&quot;API_21_FROM_TIME&quot;, fromDate);
vars.put(&quot;API_21_TO_TIME&quot;, toDate);</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Operational Parameters" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">&apos;use strict&apos;;
vars.put(&quot;API_21_MODULE_ID&quot;, Math.floor(Math.random()*25));
vars.put(&quot;API_21_CALLING_GT_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_21_SMSC_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_21_ST_COUNT&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_21_ACTION_ID&quot;, &quot;Final Action&quot;);
vars.put(&quot;API_21_SID_ID&quot;, Math.floor(Math.random()*10000000000));
vars.put(&quot;API_21_RULE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_21_MOD_ACTION_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_21_SMS_TYPE_ID&quot;, Math.floor(Math.random()*100));
vars.put(&quot;API_21_COUNT_ONLY&quot;, Math.floor(Math.random()*1));
vars.put(&quot;API_21_PAGENUM&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_21_PAGESIZE&quot;, Math.floor((Math.random()*100) + 1));
vars.put(&quot;API_21_ORDER_BY&quot;, &quot;frame_time&quot;);
</stringProp>
              <stringProp name="scriptLanguage">ecmascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert Status" enabled="true">
              <stringProp name="JMES_PATH">status</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <JMESPathAssertion guiclass="JMESPathAssertionGui" testclass="JMESPathAssertion" testname="Assert msg" enabled="true">
              <stringProp name="JMES_PATH">msg</stringProp>
              <stringProp name="EXPECTED_VALUE">ERROR: Invalid Order by field[2]: frame_time</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JMESPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
            </value>
          </objProp>
          <stringProp name="filename">/home/user/Projects/haud-qa/haud/haud-jmeter-tests/reports/api_${REPORT_FILE_POSTFIX}.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
